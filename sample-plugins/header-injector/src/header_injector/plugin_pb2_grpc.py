# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import plugin_pb2 as plugin__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plugin_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PluginManagerStub(object):
    """===========================
    Lifecycle / Management Service
    ===========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/plugin.PluginManager/GetInfo',
                request_serializer=plugin__pb2.Empty.SerializeToString,
                response_deserializer=plugin__pb2.PluginInfo.FromString,
                _registered_method=True)
        self.InitializePlugin = channel.unary_unary(
                '/plugin.PluginManager/InitializePlugin',
                request_serializer=plugin__pb2.InitRequest.SerializeToString,
                response_deserializer=plugin__pb2.Result.FromString,
                _registered_method=True)
        self.ConfigurePlugin = channel.unary_unary(
                '/plugin.PluginManager/ConfigurePlugin',
                request_serializer=plugin__pb2.Config.SerializeToString,
                response_deserializer=plugin__pb2.Result.FromString,
                _registered_method=True)
        self.ShutdownPlugin = channel.unary_unary(
                '/plugin.PluginManager/ShutdownPlugin',
                request_serializer=plugin__pb2.Empty.SerializeToString,
                response_deserializer=plugin__pb2.Result.FromString,
                _registered_method=True)
        self.CheckHealth = channel.unary_unary(
                '/plugin.PluginManager/CheckHealth',
                request_serializer=plugin__pb2.Empty.SerializeToString,
                response_deserializer=plugin__pb2.Result.FromString,
                _registered_method=True)


class PluginManagerServicer(object):
    """===========================
    Lifecycle / Management Service
    ===========================
    """

    def GetInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializePlugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePlugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownPlugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=plugin__pb2.Empty.FromString,
                    response_serializer=plugin__pb2.PluginInfo.SerializeToString,
            ),
            'InitializePlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializePlugin,
                    request_deserializer=plugin__pb2.InitRequest.FromString,
                    response_serializer=plugin__pb2.Result.SerializeToString,
            ),
            'ConfigurePlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePlugin,
                    request_deserializer=plugin__pb2.Config.FromString,
                    response_serializer=plugin__pb2.Result.SerializeToString,
            ),
            'ShutdownPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownPlugin,
                    request_deserializer=plugin__pb2.Empty.FromString,
                    response_serializer=plugin__pb2.Result.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=plugin__pb2.Empty.FromString,
                    response_serializer=plugin__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.PluginManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plugin.PluginManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PluginManager(object):
    """===========================
    Lifecycle / Management Service
    ===========================
    """

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginManager/GetInfo',
            plugin__pb2.Empty.SerializeToString,
            plugin__pb2.PluginInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitializePlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginManager/InitializePlugin',
            plugin__pb2.InitRequest.SerializeToString,
            plugin__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigurePlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginManager/ConfigurePlugin',
            plugin__pb2.Config.SerializeToString,
            plugin__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShutdownPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginManager/ShutdownPlugin',
            plugin__pb2.Empty.SerializeToString,
            plugin__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginManager/CheckHealth',
            plugin__pb2.Empty.SerializeToString,
            plugin__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MiddlewareStub(object):
    """===========================
    Request / Middleware Service
    ===========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShouldHandle = channel.unary_unary(
                '/plugin.Middleware/ShouldHandle',
                request_serializer=plugin__pb2.RequestContext.SerializeToString,
                response_deserializer=plugin__pb2.BoolResult.FromString,
                _registered_method=True)
        self.ProcessRequest = channel.unary_unary(
                '/plugin.Middleware/ProcessRequest',
                request_serializer=plugin__pb2.Request.SerializeToString,
                response_deserializer=plugin__pb2.Response.FromString,
                _registered_method=True)


class MiddlewareServicer(object):
    """===========================
    Request / Middleware Service
    ===========================
    """

    def ShouldHandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MiddlewareServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ShouldHandle': grpc.unary_unary_rpc_method_handler(
                    servicer.ShouldHandle,
                    request_deserializer=plugin__pb2.RequestContext.FromString,
                    response_serializer=plugin__pb2.BoolResult.SerializeToString,
            ),
            'ProcessRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessRequest,
                    request_deserializer=plugin__pb2.Request.FromString,
                    response_serializer=plugin__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Middleware', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plugin.Middleware', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Middleware(object):
    """===========================
    Request / Middleware Service
    ===========================
    """

    @staticmethod
    def ShouldHandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.Middleware/ShouldHandle',
            plugin__pb2.RequestContext.SerializeToString,
            plugin__pb2.BoolResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.Middleware/ProcessRequest',
            plugin__pb2.Request.SerializeToString,
            plugin__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
